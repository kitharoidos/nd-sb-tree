module Main
    ( main
    ) where

import Algebra.Graph (Graph, overlays, path, edges, vertices)
import Linear.V3
import Linear.V (toV)
import Math.SternBrocotTree (treeToLevel, branchToRatio)
import Numeric.Natural (Natural)
import Test.Tasty (TestTree, defaultMain)
import Test.Tasty.Hspec (testSpec, describe, it, shouldBe)

main :: IO ()
main = testTree >>= defaultMain

testTree :: IO TestTree
testTree = testSpec "(checked by Hspec)" $ do
    describe "Math.SternBrocotTree.branchToSequence" $
        it "returns the correct branch to 16:9:6" $
            branchToRatio (toV $ V3 16 9 6) `shouldBe` (toV <$> correctBranch)
    describe "Math.SternBrocotTree.branchToSequence" $
        it "returns the correct branch to 1:1:1" $
            branchToRatio (toV $ V3  1 1 1) `shouldBe` (toV <$> correctBranchToOnes)
    describe "Math.SternBrocotTree.treeToLevel" $
        it "returns the correct 3-dimensional tree down to the 3rd level" $
            treeToLevel 3 `shouldBe` (toV <$> correctTree)
    describe "Math.SternBrocotTree.treeToLevel" $
        it "returns the correct zeroth level of the 3-dimensional tree" $
            treeToLevel 0 `shouldBe` (toV <$> correctZerothLevel)
    where correctBranch         = edges [ (V3  1 0 0, V3  1 1 1)
                                        , (V3  0 1 0, V3  1 1 1)
                                        , (V3  0 0 1, V3  1 1 1)
                                        , (V3  1 0 0, V3  2 2 1)
                                        , (V3  0 1 0, V3  2 2 1)
                                        , (V3  1 1 1, V3  2 2 1)
                                        , (V3  1 0 0, V3  4 3 2)
                                        , (V3  1 1 1, V3  4 3 2)
                                        , (V3  2 2 1, V3  4 3 2)
                                        , (V3  1 0 0, V3  5 3 2)
                                        , (V3  4 3 2, V3  5 3 2)
                                        , (V3  1 0 0, V3  6 3 2)
                                        , (V3  5 3 2, V3  6 3 2)
                                        , (V3  5 3 2, V3 11 6 4)
                                        , (V3  6 3 2, V3 11 6 4)
                                        , (V3  5 3 2, V3 16 9 6)
                                        , (V3 11 6 4, V3 16 9 6)] :: Graph (V3 Natural)
          correctBranchToOnes   = edges [ (V3 1 0 0, V3 1 1 1)
                                        , (V3 0 1 0, V3 1 1 1)
                                        , (V3 0 0 1, V3 1 1 1)] :: Graph (V3 Natural)
          correctTree           = edges [ (V3 1 0 0, V3 1 1 1)
                                        , (V3 0 1 0, V3 1 1 1)
                                        , (V3 0 0 1, V3 1 1 1)
                                        , (V3 1 1 1, V3 2 1 1)
                                        , (V3 1 0 0, V3 2 1 1)
                                        , (V3 0 1 0, V3 1 2 1)
                                        , (V3 1 1 1, V3 1 2 1)
                                        , (V3 0 0 1, V3 1 1 2)
                                        , (V3 1 1 1, V3 1 1 2)
                                        , (V3 1 0 0, V3 2 2 1)
                                        , (V3 0 1 0, V3 2 2 1)
                                        , (V3 1 1 1, V3 2 2 1)
                                        , (V3 1 0 0, V3 2 1 2)
                                        , (V3 0 0 1, V3 2 1 2)
                                        , (V3 1 1 1, V3 2 1 2)
                                        , (V3 0 1 0, V3 1 2 2)
                                        , (V3 0 0 1, V3 1 2 2)
                                        , (V3 1 1 1, V3 1 2 2)
                                        , (V3 1 0 0, V3 3 1 1)
                                        , (V3 2 1 1, V3 3 1 1)
                                        , (V3 1 1 1, V3 3 2 2)
                                        , (V3 2 1 1, V3 3 2 2)
                                        , (V3 0 1 0, V3 1 3 1)
                                        , (V3 1 2 1, V3 1 3 1)
                                        , (V3 1 1 1, V3 2 3 2)
                                        , (V3 1 2 1, V3 2 3 2)
                                        , (V3 0 0 1, V3 1 1 3)
                                        , (V3 1 1 2, V3 1 1 3)
                                        , (V3 1 1 1, V3 2 2 3)
                                        , (V3 1 1 2, V3 2 2 3)
                                        , (V3 1 0 0, V3 3 2 1)
                                        , (V3 2 2 1, V3 3 2 1)
                                        , (V3 0 1 0, V3 2 3 1)
                                        , (V3 2 2 1, V3 2 3 1)
                                        , (V3 1 1 1, V3 3 3 2)
                                        , (V3 2 2 1, V3 3 3 2)
                                        , (V3 1 0 0, V3 3 3 1)
                                        , (V3 0 1 0, V3 3 3 1)
                                        , (V3 2 2 1, V3 3 3 1)
                                        , (V3 1 0 0, V3 4 3 2)
                                        , (V3 1 1 1, V3 4 3 2)
                                        , (V3 2 2 1, V3 4 3 2)
                                        , (V3 0 1 0, V3 3 4 2)
                                        , (V3 1 1 1, V3 3 4 2)
                                        , (V3 2 2 1, V3 3 4 2)
                                        , (V3 1 0 0, V3 3 1 2)
                                        , (V3 2 1 2, V3 3 1 2)
                                        , (V3 0 0 1, V3 2 1 3)
                                        , (V3 2 1 2, V3 2 1 3)
                                        , (V3 1 1 1, V3 3 2 3)
                                        , (V3 2 1 2, V3 3 2 3)
                                        , (V3 1 0 0, V3 3 1 3)
                                        , (V3 0 0 1, V3 3 1 3)
                                        , (V3 2 1 2, V3 3 1 3)
                                        , (V3 1 0 0, V3 4 2 3)
                                        , (V3 1 1 1, V3 4 2 3)
                                        , (V3 2 1 2, V3 4 2 3)
                                        , (V3 0 0 1, V3 3 2 4)
                                        , (V3 1 1 1, V3 3 2 4)
                                        , (V3 2 1 2, V3 3 2 4)
                                        , (V3 0 1 0, V3 1 3 2)
                                        , (V3 1 2 2, V3 1 3 2)
                                        , (V3 0 0 1, V3 1 2 3)
                                        , (V3 1 2 2, V3 1 2 3)
                                        , (V3 1 1 1, V3 2 3 3)
                                        , (V3 1 2 2, V3 2 3 3)
                                        , (V3 0 1 0, V3 1 3 3)
                                        , (V3 0 0 1, V3 1 3 3)
                                        , (V3 1 2 2, V3 1 3 3)
                                        , (V3 0 1 0, V3 2 4 3)
                                        , (V3 1 1 1, V3 2 4 3)
                                        , (V3 1 2 2, V3 2 4 3)
                                        , (V3 0 0 1, V3 2 3 4)
                                        , (V3 1 1 1, V3 2 3 4)
                                        , (V3 1 2 2, V3 2 3 4)] :: Graph (V3 Natural)
          correctZerothLevel = vertices [ V3 1 0 0
                                        , V3 0 1 0
                                        , V3 0 0 1] :: Graph (V3 Natural)
